get_ubuntu_images:
name: 'Obtain base Ubuntu images'
description: 'From cache or from online'
inputs:
  no-cache:
    description: 'Whether to force a new download of the images.'
    required: false
    default: false
  path:
    description: 'Directory in which to place the images'
    required: false
    default: './'
  token:
    description: 'GitHub token. Must have permission to delete a GitHub Actions cache resource.'
    required: false
    default: ${{ github.token }}
outputs:
  amd64_path:
    description: 'The path, including name, to the amd64 image.'
    value: ${{ steps.make-paths.outputs.amd64_path }}
  arm64_path:
    description: 'The path, including name, to the ARM image.'
    value: ${{ steps.make-paths.outputs.arm64_path }}
runs:
  using: "composite"
  steps:
    - name: Get current date (for up-to-date cache values)
      id: get-date
      shell: bash
      run: |
        ## Get current date and time (for up-to-date cache values)
        DATE_STR=`date '+%F'`
        echo "date=$DATE_STR" | tee -a $GITHUB_OUTPUT
        TIME_STR=`date '+%s'`
        echo "time=$TIME_STR" | tee -a $GITHUB_OUTPUT
      # outputs:
      # date: 'The current date as a string with no spaces.'
      # time: 'The current time as epoch (seconds).'

    - name: Make sure desired directories exist + end with a slash
      id: safe-paths
      shell: bash
      run: |
        ## Make sure desired directories exist + end with a slash
        [[ "${cache}" != */ ]] && cache="${cache}/" # ensure path string ends with slash
        cache=${cache/\~/$HOME}                     # replace '~' with home directory (can't figure out how to get this to happen automatically)
        mkdir -p $cache                             # ensure path exists
        echo "cache=$cache" | tee -a $GITHUB_OUTPUT # output

        [[ "${path}" != */ ]] && path="${path}/"    # ensure path string ends with slash
        mkdir -p $path                              # ensure path exists
        echo "path=$path" | tee -a $GITHUB_OUTPUT   # output
      env:
        path: ${{ inputs.path }}
        cache: ~/get_ubuntu_images_working_dir/
      # outputs:
      # path: The input path with exactly one trailing slash at the end.
      # cache: Location of the images when interacting with the cache

    - name: Generate paths
      id: make-paths
      shell: bash
      run: |
        ## Generate paths
        echo "amd64_path=${dest_dir}${amd64_filename}" | tee -a $GITHUB_OUTPUT
        echo "arm64_path=${dest_dir}${arm64_filename}" | tee -a $GITHUB_OUTPUT
        echo "amd64_cachepath=${cache_dir}${amd64_filename}" | tee -a $GITHUB_OUTPUT
        echo "arm64_cachepath=${cache_dir}${arm64_filename}" | tee -a $GITHUB_OUTPUT
      env:
        # Turns out, these strings are only needed for this step.
        amd64_filename: amd64.wsl
        arm64_filename: arm64.wsl
        dest_dir: ${{ steps.safe-paths.outputs.path }}
        cache_dir: ${{ steps.safe-paths.outputs.cache }}
      # outputs:
      # amd64_path: Final path + name of the x86_64 image.
      # arm64_path: Final path + name of the ARM64 image.
      # amd64_cachepath: Path + name of the x86_64 image when interacting with the cache.
      # arm64_cachepath: Path + name of the ARM64 image when interacting with the cache.

    - name: Restore cached images
      id: cache-restore
      if: ${{ inputs.no-cache != 'true' }}
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.make-paths.outputs.amd64_cachepath }}
          ${{ steps.make-paths.outputs.arm64_cachepath }}
        key: ubuntu_images-${{ steps.get-date.outputs.date }}

    - name: Download images from server
      id: web-download
      if: ${{ (steps.cache-restore.outcome == 'skipped') || (steps.cache-restore.outputs.cache-hit != 'true') }}
      shell: bash
      run: |
        ## Download images from server
        wget --no-verbose $AMD64_SOURCE -O $AMD64_DESTPATH
        wget --no-verbose $ARM64_SOURCE -O $ARM64_DESTPATH
      env:
        AMD64_SOURCE: 'https://releases.ubuntu.com/noble/ubuntu-24.04.2-wsl-amd64.wsl'
        AMD64_DESTPATH: ${{ steps.make-paths.outputs.amd64_cachepath }}
        ARM64_SOURCE: 'https://cdimages.ubuntu.com/releases/24.04.2/release/ubuntu-24.04.2-wsl-arm64.wsl'
        ARM64_DESTPATH: ${{ steps.make-paths.outputs.arm64_cachepath }}

    - name: Clear any existing cache, so we do not have redundant data
      if: ${{ (steps.cache-restore.outcome == 'skipped') || (steps.cache-restore.outputs.cache-hit != 'true') }}
      shell: bash
      run: |
        ## Clear any existing cache, so we do not have redundant data
        gh cache delete --all --succeed-on-no-caches
      env:
        GH_TOKEN: ${{ inputs.token }}
        GH_REPO: ${{ github.repository }}

    - name: Cache the downloaded images
      id: cache-save
      if: ${{ (steps.cache-restore.outcome == 'skipped') || (steps.cache-restore.outputs.cache-hit != 'true') }}
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ steps.make-paths.outputs.amd64_cachepath }}
          ${{ steps.make-paths.outputs.arm64_cachepath }}
        key: ubuntu_images-${{ steps.get-date.outputs.date }}

    - name: Move images into desired directory
      shell: bash
      run: |
        ## Move images into desired directory
        mv ${{ steps.make-paths.outputs.amd64_cachepath }} ${{ steps.make-paths.outputs.amd64_path }}
        mv ${{ steps.make-paths.outputs.arm64_cachepath }} ${{ steps.make-paths.outputs.arm64_path }}

    - name: Asserts
      shell: bash
      run: |
        ## Asserts
        assert_header='===='
        echo "Checking our output files, at the following paths:"
        echo "amd64 image: $amd64_path"
        echo "ARM image: $arm64_path"
        
        # Assert we have exactly one instance of the two images in our repository's GitHub Actions cache
        echo "$assert_header Repository cache keys that currently exist:"
        caches="$(gh cache list)"
        echo "$caches"
        if [[ $(wc -l <<< "$caches") != "1" ]]; then
          echo "Assertion failed: expected 1 cache entry but we got $(wc -l <<< "$caches")" >&2
          exit 1
        fi

        # Assert we created two files and they are reasonably large
        echo "$assert_header File sizes:"
        echo "$(du -h $amd64_path)"
        echo "$(du -h $arm64_path)"
        
        if [ "$(du --block-size=1M $amd64_path | cut -f1)" -lt 200 ]; then
          echo "Assertion failed: amd64 image size is under 200M" >&2
          exit 1
        fi
        if [ "$(du --block-size=1M $arm64_path | cut -f1)" -lt 200 ]; then
          echo "Assertion failed: ARM image size is under 200M" >&2
          exit 1
        fi
      env:
        GH_TOKEN: ${{ inputs.token }}
        GH_REPO: ${{ github.repository }}
        # make sure these match the expressions which define the action's output.
        amd64_path: ${{ steps.make-paths.outputs.amd64_path }}
        arm64_path: ${{ steps.make-paths.outputs.arm64_path }}
